#!/bin/bash

# Smoke Tests for $APPNAME
# Basic functionality tests to ensure deployment is working

set -e

# Configuration
BASE_URL="${BASE_URL:-http://localhost:4000}"
API_BASE_URL="${API_BASE_URL:-$BASE_URL/api}"
TIMEOUT="${TIMEOUT:-30}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Test results
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# Logging
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

# Test helper function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_exit_code="${3:-0}"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    echo -n "Testing $test_name... "
    
    if eval "$test_command" >/dev/null 2>&1; then
        if [ $? -eq $expected_exit_code ]; then
            echo -e "${GREEN}PASS${NC}"
            TESTS_PASSED=$((TESTS_PASSED + 1))
            return 0
        fi
    fi
    
    echo -e "${RED}FAIL${NC}"
    TESTS_FAILED=$((TESTS_FAILED + 1))
    return 1
}

# HTTP test helper
http_test() {
    local url="$1"
    local expected_status="${2:-200}"
    local method="${3:-GET}"
    local data="$4"
    
    local curl_args=(-s -w "%{http_code}" -o /dev/null --max-time $TIMEOUT)
    
    if [ "$method" != "GET" ]; then
        curl_args+=(-X "$method")
    fi
    
    if [ -n "$data" ]; then
        curl_args+=(-H "Content-Type: application/json" -d "$data")
    fi
    
    local status_code=$(curl "${curl_args[@]}" "$url")
    [ "$status_code" = "$expected_status" ]
}

# JSON API test helper
api_test() {
    local endpoint="$1"
    local expected_status="${2:-200}"
    local method="${3:-GET}"
    local data="$4"
    
    http_test "$API_BASE_URL$endpoint" "$expected_status" "$method" "$data"
}

# Health checks
log "Starting smoke tests for $BASE_URL"

# Basic connectivity
run_test "Basic connectivity" "curl -s --max-time $TIMEOUT '$BASE_URL' >/dev/null"

# Health endpoint
run_test "Health endpoint" "http_test '$BASE_URL/health' 200"

# API health endpoint
run_test "API health endpoint" "api_test '/health' 200"

# Static assets
run_test "Static assets" "http_test '$BASE_URL/static/css/app.css' 200"

# Database connectivity (if available)
if api_test "/health/db" 200 2>/dev/null; then
    run_test "Database connectivity" "api_test '/health/db' 200"
else
    warn "Database health endpoint not available, skipping test"
fi

# Cache connectivity (if available)
if api_test "/health/cache" 200 2>/dev/null; then
    run_test "Cache connectivity" "api_test '/health/cache' 200"
else
    warn "Cache health endpoint not available, skipping test"
fi

# Authentication endpoints
log "Testing authentication endpoints..."

# Login page
run_test "Login page" "http_test '$BASE_URL/login' 200"

# API authentication (should require auth)
run_test "API requires authentication" "api_test '/protected' 401"

# Registration endpoint (if available)
if http_test "$BASE_URL/register" 200 2>/dev/null; then
    run_test "Registration page" "http_test '$BASE_URL/register' 200"
fi

# Core functionality tests
log "Testing core functionality..."

# Home page
run_test "Home page" "http_test '$BASE_URL/' 200"

# 404 handling
run_test "404 handling" "http_test '$BASE_URL/nonexistent-page' 404"

# API 404 handling  
run_test "API 404 handling" "api_test '/nonexistent-endpoint' 404"

# Rate limiting (if enabled)
log "Testing rate limiting..."

# Make multiple rapid requests to test rate limiting
rate_limit_test() {
    local count=0
    for i in {1..10}; do
        if http_test "$API_BASE_URL/health" 429; then
            count=$((count + 1))
        fi
        sleep 0.1
    done
    
    # If we get any 429 responses, rate limiting is working
    [ $count -gt 0 ]
}

if rate_limit_test 2>/dev/null; then
    run_test "Rate limiting" "true"
else
    warn "Rate limiting not detected or not configured"
fi

# Security headers
log "Testing security headers..."

security_headers_test() {
    local response=$(curl -s -I --max-time $TIMEOUT "$BASE_URL/")
    
    # Check for basic security headers
    echo "$response" | grep -qi "X-Frame-Options" && \
    echo "$response" | grep -qi "X-Content-Type-Options" && \
    echo "$response" | grep -qi "X-XSS-Protection"
}

run_test "Security headers" "security_headers_test"

# WebSocket connectivity (if available)
log "Testing WebSocket connectivity..."

websocket_test() {
    # Simple WebSocket connection test using curl
    curl -s --max-time 5 \
         -H "Connection: Upgrade" \
         -H "Upgrade: websocket" \
         -H "Sec-WebSocket-Version: 13" \
         -H "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==" \
         "$BASE_URL/ws" 2>/dev/null | grep -q "101"
}

if websocket_test 2>/dev/null; then
    run_test "WebSocket connectivity" "websocket_test"
else
    warn "WebSocket endpoint not available or not working"
fi

# Performance tests
log "Testing performance..."

# Response time test
response_time_test() {
    local response_time=$(curl -s -w "%{time_total}" -o /dev/null --max-time $TIMEOUT "$BASE_URL/")
    # Check if response time is less than 2 seconds
    awk "BEGIN {exit !($response_time < 2.0)}"
}

run_test "Response time < 2s" "response_time_test"

# Load test (basic)
load_test() {
    local success_count=0
    for i in {1..5}; do
        if http_test "$BASE_URL/" 200; then
            success_count=$((success_count + 1))
        fi &
    done
    
    wait
    
    # All requests should succeed
    [ $success_count -eq 5 ]
}

run_test "Basic load test" "load_test"

# Memory usage (if metrics available)
if api_test "/metrics" 200 2>/dev/null; then
    memory_test() {
        local metrics=$(curl -s --max-time $TIMEOUT "$API_BASE_URL/metrics")
        # Simple check - just verify we can get metrics
        echo "$metrics" | grep -q "memory\|heap\|alloc"
    }
    
    run_test "Memory metrics" "memory_test"
fi

# Log analysis
log "Analyzing logs..."

# Check for critical errors in recent logs
log_test() {
    if [ -f "/var/log/$APPNAME.log" ]; then
        # Check last 100 lines for FATAL or PANIC
        ! tail -100 "/var/log/$APPNAME.log" | grep -qi "FATAL\|PANIC"
    else
        # If no log file, assume it's okay
        true
    fi
}

run_test "No critical errors in logs" "log_test"

# Final results
log "Smoke tests completed"
echo ""
echo "Results:"
echo "  Tests passed: $TESTS_PASSED"
echo "  Tests failed: $TESTS_FAILED"  
echo "  Total tests:  $TESTS_TOTAL"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}All smoke tests passed! üéâ${NC}"
    exit 0
else
    echo -e "${RED}$TESTS_FAILED test(s) failed! ‚ùå${NC}"
    exit 1
fi