package controllers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/go-chi/chi/v5"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test$CONTROLLERNAME$Controller(t *testing.T) {
	controller := New$CONTROLLERNAME$Controller()

	t.Run("List", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/$ROUTE_PREFIX$", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		controller.List(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		assert.True(t, response["success"].(bool))
		assert.NotNil(t, response["data"])
		assert.NotNil(t, response["meta"])
	})

	t.Run("List with pagination", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/$ROUTE_PREFIX$?page=2&limit=5", nil)
		require.NoError(t, err)

		rr := httptest.NewRecorder()
		controller.List(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		meta := response["meta"].(map[string]interface{})
		assert.Equal(t, float64(2), meta["page"])
		assert.Equal(t, float64(5), meta["limit"])
	})

	t.Run("Get", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/$ROUTE_PREFIX$/1", nil)
		require.NoError(t, err)

		// Setup chi context
		rctx := chi.NewRouteContext()
		rctx.URLParams.Add("id", "1")
		req = req.WithContext(chi.NewRouteContext().WithContext(req.Context()))

		rr := httptest.NewRecorder()
		controller.Get(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		assert.True(t, response["success"].(bool))
		assert.NotNil(t, response["data"])
	})

	t.Run("Get with invalid ID", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/$ROUTE_PREFIX$/invalid", nil)
		require.NoError(t, err)

		// Setup chi context
		rctx := chi.NewRouteContext()
		rctx.URLParams.Add("id", "invalid")
		req = req.WithContext(chi.NewRouteContext().WithContext(req.Context()))

		rr := httptest.NewRecorder()
		controller.Get(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})

	t.Run("Create", func(t *testing.T) {
		payload := Create$CONTROLLERNAME$Request{
			Name:        "Test $CONTROLLERNAME$",
			Description: "Test Description",
		}
		
		jsonBody, err := json.Marshal(payload)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/$ROUTE_PREFIX$", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		controller.Create(rr, req)

		assert.Equal(t, http.StatusCreated, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		assert.True(t, response["success"].(bool))
		assert.NotNil(t, response["data"])
		assert.Contains(t, response["message"], "created successfully")
	})

	t.Run("Create with invalid JSON", func(t *testing.T) {
		req, err := http.NewRequest("POST", "/$ROUTE_PREFIX$", bytes.NewBuffer([]byte("invalid json")))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		controller.Create(rr, req)

		assert.Equal(t, http.StatusBadRequest, rr.Code)
	})

	t.Run("Create with missing required fields", func(t *testing.T) {
		payload := Create$CONTROLLERNAME$Request{
			// Missing required Name field
			Description: "Test Description",
		}
		
		jsonBody, err := json.Marshal(payload)
		require.NoError(t, err)

		req, err := http.NewRequest("POST", "/$ROUTE_PREFIX$", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		rr := httptest.NewRecorder()
		controller.Create(rr, req)

		assert.Equal(t, http.StatusUnprocessableEntity, rr.Code)
	})

	t.Run("Update", func(t *testing.T) {
		payload := Update$CONTROLLERNAME$Request{
			Name:        "Updated $CONTROLLERNAME$",
			Description: "Updated Description",
		}
		
		jsonBody, err := json.Marshal(payload)
		require.NoError(t, err)

		req, err := http.NewRequest("PUT", "/$ROUTE_PREFIX$/1", bytes.NewBuffer(jsonBody))
		require.NoError(t, err)
		req.Header.Set("Content-Type", "application/json")

		// Setup chi context
		rctx := chi.NewRouteContext()
		rctx.URLParams.Add("id", "1")
		req = req.WithContext(chi.NewRouteContext().WithContext(req.Context()))

		rr := httptest.NewRecorder()
		controller.Update(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		assert.True(t, response["success"].(bool))
		assert.Contains(t, response["message"], "updated successfully")
	})

	t.Run("Delete", func(t *testing.T) {
		req, err := http.NewRequest("DELETE", "/$ROUTE_PREFIX$/1", nil)
		require.NoError(t, err)

		// Setup chi context
		rctx := chi.NewRouteContext()
		rctx.URLParams.Add("id", "1")
		req = req.WithContext(chi.NewRouteContext().WithContext(req.Context()))

		rr := httptest.NewRecorder()
		controller.Delete(rr, req)

		assert.Equal(t, http.StatusOK, rr.Code)
		
		var response map[string]interface{}
		err = json.Unmarshal(rr.Body.Bytes(), &response)
		require.NoError(t, err)
		
		assert.True(t, response["success"].(bool))
		assert.Contains(t, response["message"], "deleted successfully")
	})
}

func Test$CONTROLLERNAME$Routes(t *testing.T) {
	controller := New$CONTROLLERNAME$Controller()
	router := controller.Routes()

	// Test that routes are properly registered
	testCases := []struct {
		method string
		path   string
	}{
		{"GET", "/"},
		{"POST", "/"},
		{"GET", "/123"},
		{"PUT", "/123"},
		{"DELETE", "/123"},
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("%s %s", tc.method, tc.path), func(t *testing.T) {
			req, err := http.NewRequest(tc.method, tc.path, nil)
			require.NoError(t, err)

			rr := httptest.NewRecorder()
			router.ServeHTTP(rr, req)

			// Should not return 404 (route not found)
			assert.NotEqual(t, http.StatusNotFound, rr.Code)
		})
	}
}